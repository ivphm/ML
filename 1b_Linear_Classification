import pandas as pd
import numpy as np

#[symmetry, intensity, label]
train_df = pd.read_csv("HW1_data/1/train_1_5.csv", header=None)
X_train = train_df.iloc[:, :2].values #features (symmetry, intensity)
y_train = train_df.iloc[:, 2].values #labels (1 or 5)

# map labels to perceptron binary labels: digit 1 to -1, digit 5 to +1
y_train = np.where(y_train == 1, -1, 1)

#initialise parameters
theta = np.zeros(2)  # weights for symmetry and intensity
theta_0 = 0 # offset
epochs = 5

for epoch in range(epochs): # go through training data set 5 times
    for x, y in zip(X_train, y_train): # for each training example
        if y * (np.dot(theta, x) + theta_0) <= 0: # if misclassified (prediction and label disagree)
            theta += y * x # perceptron update rule with offset
            theta_0 += y

# test set
test_df = pd.read_csv("HW1_data/1/test_1_5.csv", header=None)
X_test = test_df.iloc[:, :2].values
y_test = np.where(test_df.iloc[:, 2] == 1, -1, 1)

# predict and calculate accuracy
preds = np.sign(np.dot(X_test, theta) + theta_0) # linear decision rule
accuracy = np.mean(preds == y_test) # % of test examples correctly classified

print("Theta:", theta) # theta: [2.05895878 8.83521606]
print("Offset:", theta_0) # offset: -1
print("Accuracy:", accuracy) # accuracy: 0.9670658682634731
